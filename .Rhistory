pi:10
15:1
?:
?`:`
seq(1,20)
seq(0, 10, by=0.5)
cube <- function(x, n) {
x^3
}
leave()
exit()
cube <- function(x, n) {
x^3
}
?ln
x<-5
z <- function(b){}
z <- function(b){b+2+x}
z(10)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
install.package(swirl)
package.install(swirl)
install.packages("swirl")
library("swirl")
swirl
swirl()
c(.5,55,-10,6)
num_vect <- c(.5,55,-10,6)
tf<- num_vect<1
tf
num_vect>=6
install.packages("data.table")
library("data.table")
exit()
library("data.table")
exit()
leave()
leave
exit
?pbeta
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
temp[X]
temp['X']
.1+.4+.9+1.2
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
rankall<-function(outcome,num){
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,4,4))
plot(x,y, pch=19)
title("Scatter")
text(-2,-2,"Label")
fit<-lm(y~x)
abline(fit)
abline(fit, lwd=3)
abline(fit, lwd=3, col="blue")
plot(x,y, pch=19, xlab="weight", main="Scat")
g<-gl(2,50,labels=c("Male","Female"))
library(datasets)
with(faithful, plot(eruptions,waiting))
ppois(10,lambda=5*3)
round(1/sqrt(10^(1:6)),3)
ppois(10,lambda=5*3)
library(lattice)
rnorm(200)
library(datasets)
xyplot(Ozone~Wind, data=airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone~Wind | Month, data=airquality)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ,hwy,data-mog)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, color=drv)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
?print.trellis
qplot(votes, rating, data = movies) + geom_smooth()
getwd()
setwd
?setwd
setwd("/Users/Chris/datasciencecoursera/ExploratoryDataAnalysis/Project1")
getwd()
readtable("household_power_consumption.txt")
read.table("household_power_consumption.txt")
full<-read.table("household_power_consumption.txt")
full$Date<-as.Date(full$Date)
full$Time<-strptime(full$Time)
full$Date
colnames(full)
?read.table
full<-read.table("household_power_consumption.txt",sep = ";", header=TRUE, na.strings="?")
colnames(full)
full$Date<-as.Date(full$Date)
full$Time<-strptime(full$Time)
full$Time
?strptime
full$Time<-strptime(full$Time, format = "")
df<-full$Date='2007-02-01'
df<-full$Date=='2007-02-01'
df<-full[full$Date='2007-02-01']
df<-full[full$Date=='2007-02-01']
df<-subset(full, full$Date = '2007-02-01')
df<-subset(full, full$Date == '2007-02-01')
df
full$Date
class(full$Date)
full<-read.table("household_power_consumption.txt",sep = ";", header=TRUE, na.strings="?")
full$Date
?as.Date
full$Date<-as.Date(full$Date, "%m/%d/%y")
full$Date
df<-subset(full, full$Date == '2007-02-01')
df
df<-subset(full, full$Date == '02/01/2007')
class(full$Date)
df<-subset(full, full$Date = as.Date('2007-02-01',"%m/%d/%y"))
df<-subset(full, full$Date == as.Date('2007-02-01',"%m/%d/%y"))
as.Date('2007-02-01',"%m/%d/%y")
df<-subset(full, full$Date == as.Date('02/01/2007',"%m/%d/%y"))
df2<-full[full$Date== as.Date('02/01/2007',"%m/%d/%y"),]
df2$Date
df2$Date
df$Date
df2<-full[full$Date== as.Date('02/01/2007',"%m/%d/%y"),]
packages.install("knitr")
package.install("knitr")
install.package("knitr")
install.packages("knitr")
library(knitr)
p<-read.csv("repdata-data-activity")
p<-read.csv("repdata-data-activity.csv")
setwd("/Users/Chris/datasciencecoursera/ReproducibleResearch")
p<-read.csv("repdata-data-activity.csv")
p<-read.csv("activity.csv")
p
colnames(p)
summary(p)
activity<-read.csv("activity.csv")
mean(activity$steps)
activity$steps
mean(activity$steps, na.rm=TRUE)
class(activity$date)
by(activity$steps,activity$date,mean)
by(activity$steps,activity$date,mean, na.rm=TRUE)
activity$steps
View(activity)
ave(activity$steps, activity$date, na.rm=TRUE)
ave(activity$steps, activity$date, na.rm=TRUE)
by(activity$steps,activity$date,mean, na.rm=TRUE)
aggregate( activity$steps~activity$date, activity, mean )
aggregate( activity$steps~activity$date, activity, sum )
histogram(aggregate( activity$steps~activity$date, activity, mean ))
stepsbydate<-aggregate( activity$steps~activity$date, activity, sum )
colnames(stepsbydate)
histogram(stepsbydate$activity$date)
stepsbydate$activity$date
stepsbydate[1,]
stepsbydate[,1]
histogram(stepsbydate[,1])
histogram(stepsbydate[,2])
mean(stepsbyDate)
mean(stepsbydate)
mean(stepsbydate, na.rm=TRUE)
mean(stepsbydate[,2], na.rm=TRUE)
median(stepsbydate[,2], na.rm=TRUE)
?histogram
by(activity$steps,activity$date,mean, na.rm=TRUE)
aggregate( activity$steps~activity$date, activity, mean )
stepsByInterval<-aggregate(activity$steps~activity$date, activity, mean)
plot(stepsByInterval[,1], stepsByInterval[,2], type="l", xlab=NA, ylab=NA, lwd=1)
?max
max(stepsByInterval[,2])
stepsByInterval<-aggregate(activity$steps~activity$interval, activity, mean)
View(stepsByInterval)
plot(stepsByInterval[,1], stepsByInterval[,2], type="l", xlab=NA, ylab=NA, lwd=1)
?max
max(stepsByInterval)
max(stepsByInterval[,2])
?which
max(which(stepsByInterval[,2]))
?which.ax
?which.max
which.max(stepsByInterval[,2])
stepsByInterval[104,]
sum(is.na(activity))
?as.date
?as.Date
as.Date(activity$dates)
activity$dates
View(activity)
as.Date(activity$date)
class(as.Date(activity$date))
which(is.na(activity)==TRUE)
View(activity)
z<-which(is.na(activity)==TRUE)
activity[z]
activity[z,]
View(stepsByInterval)
activity[z,]<-stepsByInterval[activity[z,3]==stepsByInterval$interval[,3]]
activity[z,]<-stepsByInterval[(activity[z,3]==stepsByInterval$interval[,3])]
is.na(activity2)
is.na(activity)
activity[is.na(activity2)]
activity[is.na(activity)]
?replace
weekdays(activity$date) == "Sunday" | weekdays(activity$date) == "Saturday"
?weekdays
weekday(activity$date)
weekdays(activity$date)
class(activity$date)
activity$date<-as.Date(activity$date)
weekdays(activity$date) == "Sunday" | weekdays(activity$date) == "Saturday"
?factor
weekdays(activity$date)
actvity$day<- factor( levels=c("weekday","weekend"))
activity$day<- factor( levels=c("weekday","weekend"))
activity$day
activity[weekdays(activity$date) == "Sunday" | weekdays(activity$date)] == "Saturday"]<-"weekend"
activity[weekdays(activity$date) == "Sunday" | weekdays(activity$date) == "Saturday"]<-"weekend"
activity[weekdays(activity$date) == "Sunday" | weekdays(activity$date) == "Saturday",]<-"weekend"
activity[weekdays(activity$date) == "Sunday" | weekdays(activity$date) == "Saturday"]<-"weekend"
activity[weekdays(activity$date) == "Sunday" | weekdays(activity$date) == "Saturday",]<-"weekend"
ping<-weekdays(activity$date)
ping
ping[ping == "Sunday" | ping == "Saturday"]
ping[ping == "Sunday" | ping == "Saturday"]<-"weekend"
ping
ping[ping == "Sunday" | ping == "Saturday"]<-"weekend"
ping[ping != "Sunday" | ping != "Saturday"]<-"weekday"
ping
ping<-weekdays(activity$date)
if(ping[ping == "Sunday" | ping == "Saturday"])<-"weekend"
ping[ping == "Sunday" | ping == "Saturday"]
class(ping[ping == "Sunday" | ping == "Saturday"])
ping<-weekdays(activity$date)
ping[ping == "Sunday" | ping == "Saturday"]<-"weekend"
ping[ping != "weekend"]<-"weekday"
actvity$day<-ping
actvity$day<-factor(activity$day, levels=c("weekday","weekend"))
ping<-weekdays(activity$date)
ping[ping == "Sunday" | ping == "Saturday"]<-"weekend"
ping[ping != "weekend"]<-"weekday"
activity$day<-ping
actvity$day<-factor(activity$day, levels=c("weekday","weekend"))
ping<-weekdays(activity$date)
ping[ping == "Sunday" | ping == "Saturday"]<-"weekend"
ping[ping != "weekend"]<-"weekday"
activity$day<-ping
activity$day<-factor(activity$day, levels=c("weekday","weekend"))
activity$day
z<-aggregate(activity$steps~activity$interval + activity$day , activity, mean)
z
xyplot(activity$interval~activity$steps|activity$day,
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight")
xyplot(activity$steps~activity$interval|activity$day, type="l"
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight")
xyplot(activity$steps~activity$interval|activity$day, type="l",
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight")
xyplot(activity$steps~activity$interval|activity$day, type="l",
main="Steps per time interval by day",
ylab="Average steps", xlab="Interval")
stepsByDay<-aggregate(activity$steps~activity$interval + activity$day , activity, mean)
View(stepsByDay)
?colnames
View(stepsByDay)
rename(stepsByDay, c("interval","day","steps")
)
names(stepsByDay)[names(d)=="beta"] <- "two"
?aggregate
names(stepsByDay)[names(stepsByDay)=="activiy$interval"] <- "interval"
stepsByDay
View(stepsByDay)
colnames(stepsByDay) <- c("interval","day","stepsMean")
colnames(stepsByDay)
?xyplot
xyplot(interval~stepsMean | day ,stepsByDay, type="l", main="Steps per time interval by day", ylab="Average steps", xlab="Interval")
xyplot(stepsMean ~interval | day ,stepsByDay, type="l", main="Steps per time interval by day", ylab="Average steps", xlab="Interval")
is.na(activity2)
is.na(activity)
which(is.na(activity)==TRUE)
activity[which(is.na(activity)==TRUE),]
is.na(activity)
activity[is.na(activity)]
activity[which(is.na(activity)==TRUE),]
class(activity$date)
dat <- data.frame(V1 = 1:5, V3 = c(1, NA, 3, 4,  NA))
> dat$new <- dat$V3
> my.na <- is.na(dat$V3)
> dat$new[my.na] <- dat$V1[my.na]
>
> dat
dat <- data.frame(V1 = 1:5, V3 = c(1, NA, 3, 4,  NA))dat$new <- dat$V3
> my.na <- is.na(dat$V3)
> dat$new[my.na] <- dat$V1[my.na]
>
> dat
dat <- data.frame(V1 = 1:5, V3 = c(1, NA, 3, 4,  NA))dat$new <- dat$V3
> my.na <- is.na(dat$V3)
> dat$new[my.na] <- dat$V1[my.na]
>
> da
dat <- data.frame(V1 = 1:5, V3 = c(1, NA, 3, 4,  NA))
dat$new <- dat$V3
my.na <- is.na(dat$V3)
dat$new[my.na] <- dat$V1[my.na]
dat
s.na(dat$V3)
is.na(dat$V3)
activity$steps
ppois(10,lambda=5*3)
View(full)
View(full)
?match
activity[is.na(activity$steps)]
activity[is.na(activity$step)]
View(activity)
activity[is.na(activity$steps)]
is.na(activity$steps)
?t.test
activity[is.na(activity$steps)]
activity
is.na(activity$steps)
nas<-is.na(activity$steps)
activity[nas]
activity[nas,]
intAvg$step
?match
activity$date[nas]
activity$date[nas]->x
View(stepsbydate)
View(stepsByDay)
View(stepsByDay)
View(stepsbydate)
stepsbydate[match(X, stepsbydate[,1])]
stepsbydate[match(x, stepsbydate[,1])]
stepsbydate[match(x, stepsbydate[,1]),]
package.install('zoo')
install.package('zoo')
install.packages('zoo')
library(zoo)
?na.aggregate
na.aggregate(activity, by = date, FUN=mean)
View(activity)
na.aggregate(activity, by = date, FUN=mean)
na.aggregate(activity, by = activity$date, FUN=mean)
activity2<-na.aggregate(activity$steps, by = activity$date, FUN=mean)
activity2
sum(is.na(activivty2))
sum(is.na(activity2))
activity2<-na.aggregate(activity$steps, by = activity$date, FUN=mean, na.rm=TRUE)
sum(is.na(activity2))
activity2
match(activity$date, stepsbydate[,1])
stepsbydate[,1]
match(activity$date, stepsbydate[,1])
?match
activity$daymean<-aggregate( activity$steps~activity$date, activity, mean )
activity$daymean<-stepsbydate[activity$date,2]
activity$daymean
for (i in 1:50 ){}
for (i in 1:50 ){
activity$dayz[i]<-stepsbydate[]
}
for (i in 1:50){
curdate<-activity$date
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
activity$dayz[i]<-meanForDate
}
for (i in 1:50){
curdate<-activity$date
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
activity$dayz[i,]<-meanForDate
}
for (i in 1:50){
curdate<-activity$date
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
activity$dayt[i]<-meanForDate
}
activity$dayt
for (i in 1:50){
curdate<-activity$date
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
print(meanForDate)
activity$dayt[i]<-meanForDate
}
for (i in 1:50){
curdate<-activity$date[i]
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
print(meanForDate)
activity$dayt[i]<-meanForDate
}
activity$date[3]
for (i in 1:50){
curdate<-activity$date[i]
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
print(curdate)
activity$dayt[i]<-meanForDate
}
stepsbydate[stepsbydate$date=="2012-10-01",2]
stepsbydate[stepsbydate$date=="2012-10-01",]
stepsbydate[stepsbydate$date=="2012-10-01",2]
stepsbydate[stepsbydate$date=="2012-10-02",2]
stepsbydate[stepsbydate$date=="2012-10-04",2]
colnames(stepsbydate)<-c("date","MeanSteps")
View(stepsbydate)
stepsbydate[stepsbydate$date=="2012-10-04",2]
for (i in 1:50){
curdate<-activity$date[i]
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
activity$dayt[i]<-meanForDate
}
activity$dayt
curdate<-activity$date[i]
curdate<-activity$date[2]
curdate
for (i in 200:500){
curdate<-activity$date[i]
meanForDate<-stepsByDate[stepsByDate$date==curdate,2]
activity$dayt[i]<-meanForDate
}
for (i in 200:500){
curdate<-activity$date[i]
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
activity$dayt[i]<-meanForDate
}
activity$dayt
curdate<-activity$date[300]
curdate
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
stepsbydate$date<-as.Date(stepsbydate$date)
meanForDate<-stepsbydate[stepsbydate$date==curdate,2]
meanForDate
stepsd<-aggregate( activity$steps~activity$date, activity, mean)
View(stepsd)
stepsd<-aggregate(activity$steps~activity$date, activity, mean)
colnames(stepsd)<-c("date","mean")
stepsd$date<-as.Date(stepsd$date)
for (i in 289:1000){
curdate<-activity$date[i]
meanForDate<-stepsd[stepsd$date==curdate,2]
activity$dayt[i]<-meanForDate
}
activity$steps[500]
activity$steps[505]
activity$steps[550]
activity$steps[650]
?na.aggregate
activity$dayr<-na.aggregate(activity, by=activity$date, FUN=mean)
warnings(activity$dayr<-na.aggregate(activity, by=activity$date, FUN=mean))
na.aggregate(activity$steps, by=activity$date, FUN=mean))
na.aggregate(activity$steps, by=activity$date, FUN=mean)
na.aggregate(activity$steps, by=activity$interval, FUN=mean)
activity3<-na.aggregate(activity$steps, by=activity$interval, FUN=mean)
activity$stepsNA<-na.aggregate(activity$steps, by=activity$interval, FUN=mean)
View(activity)
knit2html()
?knit2html
knit2html( "datasciencecoursera/ReproducibleResearch/PA1_template.Rmd")
knit2html( "datasciencecoursera/datasciencecoursera/ReproducibleResearch/PA1_template.Rmd")
getwd()
setwd("Chris/datasciencecoursera/datasciencecoursera/")
setwd("~")
getwd()
setwd("/datasciencecoursera/datasciencecoursera/")
setwd("datasciencecoursera/datasciencecoursera/")
knit2html( "ReproducibleResearch/PA1_template.Rmd")
